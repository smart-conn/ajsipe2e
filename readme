AllJoyn SIP E2E Connector

==================================================================================

Currently we only support the build on Windows. You can either build the code using 
scons or Visual Studio 2012. Note that since the SIP E2E connector code is developed 
based on AllJoyn core v15.04 which doesn't support the build option of Visual Studio 
2015, building the solution won't work in Visual Studio 2015. 

TODOs
1. Will use scons to add the build option on Ubuntu.
2. Will modify the connector to be compatible with the gateway agent framework.

==================================================================================

Before building the code using scons or Visual Studio 2012, you need to finish 
the steps as below.

1. Follow the instructions given in 
https://wiki.allseenalliance.org/develop/downloading_the_source to download 
the AllJoyn core source code including core and base services. 
(1) Run the following two commands for each git repository to switch the 
version to 15.04.
    set VER="v15.04"
    git -C core/alljoyn checkout -b %VER% origin/RB15.04
(2) Define the environment variable "ALLJOYN_SRC_1504_HOME" as the folder 
where you keep the AllJoyn source code.

2. We have made a small change in AllJoyn core String implementation to work around 
some issue. Please overwrite %ALLJOYN_SRC_1504_HOME%\core\alljoyn\common\src\String.cc 
by Tool\String.cc. Specifically, static member String::Empty is initialized by an 
empty string in our version of String.cc. You can search search 'SIP_E2E_CONNECTOR' 
for the modified content.

3. Follow the instructions given in 
https://allseenalliance.org/framework/documentation/develop/building/windows/build-source
to build AllJoyn core, control panel service, and notification service. Please 
set "CPU=x86" when you build the AllJoyn code. The scons command is as follows:
    scons OS=win7 CPU=x86 MSVC_VERSION=11.0 BINDINGS=cpp 
You may need to append the optional parameter "WS=off" to the end if you hit any 
build error related to white spaces. To save some typing, you may use the batch file 
BuildAllJoyn.bat under Tool to build all possible four flavors on Windows (x86 debug, 
x86 release, x86_64 debug, x86_64 release).
   
4. Unzip Ref\glib\glib-dev_2.28.8-1_win32.zip, Ref\iconv\iconv-1.9.2.win32.zip, 
Ref\sofia\sofia-sip-1.12.11.tar.gz, and Ref\intl\gettext-runtime-0.13.1.bin.woe32.zip to 
four different folders.

5. Define the following four environment variables.
    GLIB_HOME = <full path to the glib folder>
    ICONV_HOME = <full path to the iconv folder>
    SOFIA_SIP_HOME = <full path to the sofia folder>
    INTL_HOME = <full path to the intl folder>

6. Copy Ref\glib\glib_2.28.8-1_win32.zip\bin\libglib-2.0-0.dll to %GLIB_HOME%\bin.
    
7. Copy Ref\sofia\libsofia_sip_ua.vcxproj to %SOFIA_SIP_HOME%\win32\libsofia-sip-ua 
and overwrite the existing vcxproj file. We have made the following changes on top 
of the existing libsofia_sip_ua.vcxproj:
(1) Add su_source.c to the project libsofia_sip_ua.
(2) Disable warning 4701, 4189
(3) Add two include paths: 
    $(GLIB_HOME)\include\glib-2.0; 
    $(GLIB_HOME)\lib\glib-2.0\include
(4) Add one library path $(GLIB_HOME)\lib and one library glib-2.0.lib.

8. Copy Ref\sofia\su_configure.h to %SOFIA_SIP_HOME%\win32\sofia-sip and overwrite 
the existing header. In the new su_configure.h, we enable the macro SU_HAVE_STDINT 
and disable the macros already defined in su_types.h.

9. Open the solution %SOFIA_SIP_HOME%\win32\SofiaSIP.sln and build the project 
libsofia_sip_ua to generate libsofia_sip_ua.dll.

Now it is ready to build the code.
10. If you use scons, please run the following scons commands:
(1) For debug,
scons OS=win7 CPU=x86 MSVC_VERSION=11.0 WS=off
(2) For release,
scons OS=win7 CPU=x86 MSVC_VERSION=11.0 VARIANT=release WS=off
The binaries will be generated in build\win7\x86\$VARIANT{debug, release}\dist\cpp\bin.
 
11. If you use Visual Studio, please open the solution Test\VS\gateway_sw_vs\gateway_sw_vs.sln 
in Visual Studio 2012 and you will see three projects as below.
(1) CloudCommEngine: this generates CloudCommEngine.exe which is the main program 
of the SIP E2E connector.
(2) IMSTransport: this generates IMSTransport.dll which is used by CloudCommEngine
to communicate with the IMS client.
(3) sofia_IMS: this generates sofia_IMS.dll which is essentially the IMS client.
After you rebuild all three projects, the binaries will be generated in 
Test\VS\gateway_sw_vs\$VARIANT{Debug_1504, Release_1504}.

==================================================================================

To run the SIP E2E connector, please launch the executable CloudCommEngine.exe. To 
access our SIP server, please email renwei@nane.cn to request an xml for configuring 
the SIP client.

If you have used Visual Studio to build the code, you also need to copy the following
five dlls to the same folder where CloudCommEngine is located.
(1) %ICONV_HOME%\bin\iconv.dll
(2) %INTL_HOME%\bin\intl.dll
(3) %GLIB_HOME%\bin\libglib-2.0-0.dll
(4) %SOFIA_SIP_HOME%\win32\libsofia-sip-ua\$VARIANT{Debug, Release}\libsofia_sip_ua.dll
(5) %SOFIA_SIP_HOME%\win32\pthread\pthreadVC2.dll

==================================================================================

If you need more info or have any question, please visit the project wiki page 
https://wiki.allseenalliance.org/gateway/sip or send an email to renwei@nane.cn.